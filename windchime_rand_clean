//Marko Stamenovic
//A digital wind chime
//December 10, 2015

#include <FatReader.h>
#include <SdReader.h>
#include <avr/pgmspace.h>
#include "WaveUtil.h"
#include "WaveHC.h"


SdReader card;    // This object holds the information for the card
FatVolume vol;    // This holds the information for the partition on the card
FatReader root;   // This holds the information for the filesystem on the card
FatReader f;      // This holds the information for the file we're play

WaveHC wave;      // This is the only wave (audio) object, since we will only play one at a time

// this  function will return the number of bytes currently free in RAM, great for debugging!   
int freeRam(void)
{
  extern int  __bss_end; 
  extern int  *__brkval; 
  int free_memory; 
  if((int)__brkval == 0) {
    free_memory = ((int)&free_memory) - ((int)&__bss_end); 
  }
  else {
    free_memory = ((int)&free_memory) - ((int)__brkval); 
  }
  return free_memory; 
} 

void sdErrorCheck(void)
{
  if (!card.errorCode()) return;
  putstring("\n\rSD I/O error: ");
  Serial.print(card.errorCode(), HEX);
  putstring(", "); 
  Serial.println(card.errorData(), HEX);
  while(1);
}

// sensor thresholds

// these are constants that won't change while the code is running
const int lowerBound = 200;
const int threshold1 = 220;
const int threshold2 = 300;
const int threshold3 = 340;
const int threshold4 = 370;
const int threshold5 = 390;

//these are bins to hold different windspeed velocity files
char * low_velocity[] = {"chime1.WAV", "chime2.WAV", "chime3.WAV", "chime3.WAV", "chime7lo.wav"}; // low windspeed notes
char * mid_velocity[] = {"chime10mid.WAV", "chime11mid.WAV"}; // mid windspeed notes
char * high_velocity[] = {"chime4.WAV", "chime5.WAV"}; // high windspeed notes

// these variables will change
int sensorValue = 0;
int lastRange = 0;
int rand_num = 0;

// end pot part

void setup() {
  byte i;
  
  // set up serial port
  Serial.begin(9600);
  putstring_nl("WaveHC with ");
  putstring_nl("buttons");
  randomSeed(analogRead(1)); //set random seed
  
  putstring("Free RAM: ");       // This can help with debugging, running out of RAM is bad
  Serial.println(freeRam());      // if this is under 150 bytes it may spell trouble!
  
  // Set the output pins for the DAC control. This pins are defined in the library
  pinMode(2, OUTPUT);
  pinMode(3, OUTPUT);
  pinMode(4, OUTPUT);
  pinMode(5, OUTPUT);
  pinMode(7, OUTPUT);
  
  if (!card.init()) {         //play with 8 MHz spi (default faster!)  
    putstring_nl("Card init. failed!");  // Something went wrong, lets print out why
    digitalWrite(7, HIGH);   // turn the LED on (HIGH is the voltage level)
    delay(500);               // wait for a second
    digitalWrite(7, LOW);   
    delay(500);  
    digitalWrite(7, HIGH);
    delay(500); 
    digitalWrite(7, LOW);
    delay(500); 
    digitalWrite(7, HIGH);
    delay(500); 
    digitalWrite(7, LOW);
    delay(500);     
    digitalWrite(7, HIGH);
    delay(500); 
    digitalWrite(7, LOW);
    delay(500); 
    digitalWrite(7, HIGH);
    delay(500); 
    digitalWrite(7, LOW);
    sdErrorCheck();
    while(1);                            // then 'halt' - do nothing!
  }
  
  // enable optimize read - some cards may timeout. Disable if you're having problems
  card.partialBlockRead(true);
 
// Now we will look for a FAT partition!
  uint8_t part;
  for (part = 0; part < 5; part++) {     // we have up to 5 slots to look in
    if (vol.init(card, part)) 
      break;                             // we found one, lets bail
  }
  if (part == 5) {                       // if we ended up not finding one  :(
    putstring_nl("No valid FAT partition!");
    sdErrorCheck();      // Something went wrong, lets print out why
    while(1);                            // then 'halt' - do nothing!
  }
  
  // Lets tell the user about what we found
  putstring("Using partition ");
  Serial.print(part, DEC);
  putstring(", type is FAT");
  Serial.println(vol.fatType(),DEC);     // FAT16 or FAT32?
  
  // Try to open the root directory
  if (!root.openRoot(vol)) {
    putstring_nl("Can't open root dir!"); // Something went wrong,
    while(1);                             // then 'halt' - do nothing!
  }
  
  // Whew! We got past the tough parts.
  putstring_nl("Ready!");
  
  TCCR2A = 0;
  TCCR2B = 1<<CS22 | 1<<CS21 | 1<<CS20;

  //Timer2 Overflow Interrupt Enable
  TIMSK2 |= 1<<TOIE2;


}


void loop() {
  digitalWrite(7, HIGH);   // turn the diagnostic LED on (HIGH is the voltage level)
  sensorValue = analogRead(A0);
  byte i;
  static byte playing = -1;
  Serial.println(sensorValue);

    if (lowerBound <= sensorValue && sensorValue < threshold1) {
      if (lastRange != 1) {
        if (playing != 1) {
          playing = 1;
          rand_num = random(3);
          playfile("chime6base.wav");
          Serial.println("chime6base.wav");
          Serial.println(sensorValue);
          delay(500);
    }
      //lastRange = 1;
    }
  }
  
    if (threshold1 <= sensorValue && sensorValue < threshold2) {
      if (lastRange != 1) {
        if (playing != 1) {
          playing = 1;
          rand_num = random(3);
          playfile(low_velocity[rand_num]);
          Serial.println(low_velocity[rand_num]);
          Serial.println(sensorValue);
          delay(1000);
    }
      //lastRange = 1;
    }
  }
  

  else if(threshold3 <= sensorValue && sensorValue <= threshold4) {
    if (lastRange != 4) {
     if (playing != 4) {
      playing = 4;
          rand_num = random(2);
          playfile(high_velocity[rand_num]);
          Serial.println(mid_velocity[rand_num]);
          Serial.println(sensorValue);
          delay(4500);
}
      //lastRange = 4;
    }
  }
    
   else if(threshold4 <= sensorValue && sensorValue <= threshold5) {
    if (lastRange != 5) {
     if (playing != 5) {
      playing = 5;
          rand_num = random(2);
          playfile(high_velocity[rand_num]);
          Serial.println(high_velocity[rand_num]);
          Serial.println(sensorValue);
          delay(6900);
}
      //lastRange = 5;
    }
  }
  
  if (! wave.isplaying) {
    playing = -1;
    }
   }
 

// Plays a full file from beginning   to end with no pause.
void playcomplete(char *name) {
  // call our helper to find and play this name
  playfile(name);
  while (wave.isplaying) {
  // do nothing while its playing
  }
  // now its done playing
}

void playfile(char *name) {
  // see if the wave object is currently doing something
  if (wave.isplaying) {// already playing something, so stop it!
    wave.stop(); // stop it
  }
  // look in the root directory and open the file
  if (!f.open(root, name)) {
    putstring("Couldn't open file "); Serial.print(name); return;
  }
  // OK read the file and turn it into a wave object
  if (!wave.create(f)) {
    putstring_nl("Not a valid WAV"); return;
  }
  
  // ok time to play! start playback
  wave.play();
}
